#!/bin/bash

# Function to open the next file
tmp() {
    # Check if both editor and directory are provided as arguments
    if [ -z "$1" ] || [ -z "$2" ]; then
        echo "Usage: tmp next <editor> <directory_name>"
        return 1
    fi

    # Set the editor and directory variables
    local EDITOR="$1"
    local DIR_NAME="$2"

    # Check if the editor command exists
    if ! command -v "$EDITOR" &> /dev/null; then
        echo "Error: Editor '$EDITOR' not found."
        return 1
    fi

    # Set the base directory
    local BASE_DIR=~/temp

    # Create the base directory if it doesn't exist
    if [ ! -d "$BASE_DIR" ]; then
        mkdir -p "$BASE_DIR" || { echo "Error: Failed to create base directory '$BASE_DIR'."; return 1; }
    fi

    # Set the target directory
    local TARGET_DIR="$BASE_DIR/$DIR_NAME"

    # Create the target directory if it doesn't exist
    if [ ! -d "$TARGET_DIR" ]; then
        mkdir -p "$TARGET_DIR" || { echo "Error: Failed to create target directory '$TARGET_DIR'."; return 1; }
    fi

    # Find the highest number in existing files
    local HIGHEST_NUM=0
    for FILE in "$TARGET_DIR"/p*."$DIR_NAME"; do
        if [[ $FILE =~ p([0-9]+)\."$DIR_NAME" ]]; then
            local NUM=${BASH_REMATCH[1]}
            if (( NUM > HIGHEST_NUM )); then
                HIGHEST_NUM=$NUM
            fi
        fi
    done

    # Calculate the next file number
    local NEXT_NUM=$((HIGHEST_NUM + 1))
    local NEXT_FILE="$TARGET_DIR/p$NEXT_NUM.$DIR_NAME"

    # Create the next file
    touch "$NEXT_FILE" || { echo "Error: Failed to create file '$NEXT_FILE'."; return 1; }

    # Print the name of the created file
    echo "Created file: $NEXT_FILE"

    # Change into the target directory
    cd "$TARGET_DIR" || { echo "Error: Failed to change directory to '$TARGET_DIR'."; return 1; }

    # Open the file with the specified editor
    "$EDITOR" "$NEXT_FILE" || { echo "Error: Failed to open file '$NEXT_FILE' with editor '$EDITOR'."; return 1; }

    # Store the last opened file and editor in the configuration file
    echo "$NEXT_FILE:$EDITOR" > ~/temp/.tmp_config
}

# Function to open the previously opened file in the same editor
tmpp() {
    # Check if configuration file exists
    if [ ! -f ~/temp/.tmp_config ]; then
        echo "Error: No previous file opened."
        return 1
    fi

    # Read the last opened file and editor from the configuration file
    local PREV_INFO
    PREV_INFO=$(cat ~/temp/.tmp_config)

    # Parse the previous file path and editor
    local PREV_FILE
    local PREV_EDITOR
    PREV_FILE=$(echo "$PREV_INFO" | cut -d':' -f1)
    PREV_EDITOR=$(echo "$PREV_INFO" | cut -d':' -f2)

    # Check if the previous file exists
    if [ ! -f "$PREV_FILE" ]; then
        echo "Error: Previous file '$PREV_FILE' not found."
        return 1
    fi

    # Open the previous file with the same editor
    "$PREV_EDITOR" "$PREV_FILE" || { echo "Error: Failed to open previous file '$PREV_FILE' with editor '$PREV_EDITOR'."; return 1; }
}

# Handle commands
case "$1" in
    next)
        shift
        tmp "$@"
        ;;
    pv)
        tmpp
        ;;
    *)
        echo "Usage: tmp {next|pv} <editor> <directory_name>"
        return 1
        ;;
esac

